From 46ea3c72bd5c81c21a74b424291f47b45fe19c0e Mon Sep 17 00:00:00 2001
From: xielinfei <xielinfei@allwinnertech.com>
Date: Sat, 6 May 2017 15:46:04 +0800
Subject: [PATCH] ial: add sunxi keyboard support

Signed-off-by: xielinfei <xielinfei@allwinnertech.com>
---
 include/common.h    |   9 ++-
 src/ial/Makefile.am |   4 +-
 src/ial/Makefile.in |   4 +-
 src/ial/ial.c       |   2 +
 src/ial/sunxikey.c  | 226 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/ial/sunxikey.h  |  51 ++++++++++++
 src/ial/tslibial.c  |  16 ++++
 7 files changed, 309 insertions(+), 3 deletions(-)
 create mode 100644 src/ial/sunxikey.c
 create mode 100644 src/ial/sunxikey.h

diff --git a/include/common.h b/include/common.h
index ad90b76..f647d57 100644
--- a/include/common.h
+++ b/include/common.h
@@ -845,7 +845,7 @@ typedef struct _GAL_Rect {
  * \sa MGUI_NR_KEYS
  */
 #ifndef NR_KEYS
-#define NR_KEYS                         128
+#define NR_KEYS                         135
 #endif

 /**
@@ -1007,6 +1007,13 @@ typedef struct _GAL_Rect {
 #define SCANCODE_RIGHTWIN               126
 #define SCANCODE_MENU                   127

+#define SCANCODE_SUNXILEFT				128
+#define SCANCODE_SUNXIRIGHT				129
+#define SCANCODE_SUNXIOK				130
+#define SCANCODE_SUNXIMODE				131
+#define SCANCODE_SUNXIPOWER				132
+#define SCANCODE_SUNXIMENU				133
+#define SCANCODE_SUNXIRESET				134
 #define SCANCODE_LEFTBUTTON             0x1000
 #define SCANCODE_RIGHTBUTTON            0x2000
 #define SCANCODE_MIDDLBUTTON            0x4000
diff --git a/src/ial/Makefile.am b/src/ial/Makefile.am
index 34a264c..3bd3d3f 100644
--- a/src/ial/Makefile.am
+++ b/src/ial/Makefile.am
@@ -48,6 +48,7 @@ CISCO_TOUCHPAD_SRCS = cisco_touchpad.h cisco_touchpad.c
 MSTAR_SRCS = mstarial.h mstarial.c
 DFB_SRCS = dfb.h dfb.c

+SUNXIKey_SRCS = sunxikey.c sunxikey.h
 if MGIAL_CONSOLE
 native_libial_la_LIBADD = native/libnative.la
 endif
@@ -73,4 +74,5 @@ libial_la_SOURCES = $(COMMON_SRCS) $(DUMMY_SRCS) $(JZ4740_SRCS) \
                     $(COMMINPUT_SRCS) $(QVFB_SRCS) $(WVFB_SRCS) \
 					$(QEMU_SRCS) $(IPAQ_H3600_SRCS) $(IPAQ_H5400_SRCS) \
 					$(TSLIB_SRCS) $(SHANDONG_LIDE_SRCS) $(CISCO_TOUCHPAD_SRCS) \
-					$(MSTAR_SRCS) $(DFB_SRCS)
+					$(MSTAR_SRCS) $(DFB_SRCS) \
+					$(SUNXIKey_SRCS)
diff --git a/src/ial/Makefile.in b/src/ial/Makefile.in
index 4b0a04b..c57e7ed 100644
--- a/src/ial/Makefile.in
+++ b/src/ial/Makefile.in
@@ -70,13 +70,15 @@ am__objects_17 = lide.lo
 am__objects_18 = cisco_touchpad.lo
 am__objects_19 = mstarial.lo
 am__objects_20 = dfb.lo
+am__objects_21 = sunxikey.lo
 am_libial_la_OBJECTS = $(am__objects_1) $(am__objects_2) \
 	$(am__objects_3) $(am__objects_4) $(am__objects_5) \
 	$(am__objects_6) $(am__objects_7) $(am__objects_8) \
 	$(am__objects_9) $(am__objects_10) $(am__objects_11) \
 	$(am__objects_12) $(am__objects_13) $(am__objects_14) \
 	$(am__objects_15) $(am__objects_16) $(am__objects_17) \
-	$(am__objects_18) $(am__objects_19) $(am__objects_20)
+	$(am__objects_18) $(am__objects_19) $(am__objects_20) \
+	$(am__objects_21)
 libial_la_OBJECTS = $(am_libial_la_OBJECTS)
 DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
 depcomp = $(SHELL) $(top_srcdir)/depcomp
diff --git a/src/ial/ial.c b/src/ial/ial.c
index 8fba49d..670de2b 100644
--- a/src/ial/ial.c
+++ b/src/ial/ial.c
@@ -27,6 +27,7 @@
 #ifdef _MGIAL_QVFB
     #include "qvfb.h"
 #endif
+#include "sunxikey.h"
 #ifdef _MGIAL_JZ4740
     #include "jz4740.h"
 #endif
@@ -100,6 +101,7 @@ static INPUT inputs [] =
 #ifdef _MGIAL_QVFB
     {"qvfb", InitQVFBInput, TermQVFBInput},
 #endif
+    {"sunxikey", InitSUNXIKeyInput, TermSUNXIKeyInput},
 #ifdef _MGIAL_JZ4740
     {"jz4740", InitJZ4740Input, TermJZ4740Input},
 #endif
diff --git a/src/ial/sunxikey.c b/src/ial/sunxikey.c
new file mode 100644
index 0000000..f9106da
--- /dev/null
+++ b/src/ial/sunxikey.c
@@ -0,0 +1,226 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <linux/input.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include "common.h"
+#define _MGIAL_SUNXIKEY
+#ifdef _MGIAL_SUNXIKEY
+#include "ial.h"
+#include "sunxikey.h"
+
+#define PRESS_INSISTENTLY 1
+#define PRESS_QUICKLY 0
+
+#define TIME_USE(end, start) \
+(((end.tv_sec-start.tv_sec)*1000000+(end.tv_usec-start.tv_usec))/1000)
+
+/*static struct input_event key;*/
+static int mouse_x, mouse_y, mouse_button;
+static unsigned char state[NR_KEYS];
+static int fd_key;
+static int fd_key_power;
+static int cur_key = -2;
+
+static int mouse_update (void)
+{
+    return 1;
+}
+
+static void mouse_getxy (int* x, int* y)
+{
+    *x = mouse_x;
+    *y = mouse_y;
+}
+
+static int mouse_getbutton(void)
+{
+    return mouse_button;
+}
+
+static int castkey2scancode(void)
+{
+    int i;
+
+    for (i=0; i<SUNXI_KEY_CNT; i++) {
+        if(cur_key == key_set[i].keyCode)
+            return key_set[i].scancode;
+    }
+
+    return -1;
+
+/*  switch(cur_key) {
+    case SUNXI_KEY_LEFT:
+        return SCANCODE_SUNXILEFT;
+    case SUNXI_KEY_RIGHT:
+        return SCANCODE_SUNXIRIGHT;
+    case SUNXI_KEY_MODE:
+        return SCANCODE_SUNXIMODE;
+    case SUNXI_KEY_OK:
+        return SCANCODE_SUNXIOK;
+    case SUNXI_KEY_POWER:
+        return SCANCODE_SUNXIPOWER;
+    case SUNXI_KEY_MENU:
+        return SCANCODE_SUNXIMENU;
+    default:
+        return -1;
+    }*/
+}
+static int unknown_key_down = 0;
+static int keyboard_update(void)
+{
+    if (cur_key < 0) {
+        memset(state, 0, sizeof(state));
+        cur_key = -2;
+    } else {
+        int scancode = castkey2scancode();
+        if(scancode < 0) {
+            fprintf(stderr, "IAL: unknown key pressed <%d>\n", cur_key);
+            cur_key = -1;
+            unknown_key_down = 1;
+            return -1;
+        } else {
+            state[scancode] = 1;
+        }
+    }
+
+    return NR_KEYS;
+}
+
+static const char* keyboard_getstate(void)
+{
+    return (char *) state;
+}
+
+static int wait_event (int which, int maxfd, fd_set *in, fd_set *out,
+		fd_set *except, struct timeval *timeout)
+{
+    fd_set rfds;
+    int e;
+    struct input_event key;
+
+    if(which & IAL_KEYEVENT) {
+        if(!in) {
+            in = &rfds;
+            FD_ZERO(in);
+        }
+
+        FD_SET(fd_key, in);
+        if(fd_key > maxfd)
+            maxfd = fd_key;
+        if (fd_key_power > 0) {
+            FD_SET(fd_key_power, in);
+            if(fd_key_power > maxfd)
+                maxfd = fd_key_power;
+        }
+    }
+
+    e = select (maxfd+1, in, out, except, timeout);
+    if (e < 0)
+        return -1;
+
+    if(e > 0) {
+        if(FD_ISSET(fd_key, in)) {
+            FD_CLR(fd_key, in);
+            read(fd_key, &key, sizeof(key));
+            if (0 == key.code)
+                return -1;
+            else if (key.value > 0)
+                    cur_key = key.code;
+            else {
+                if (unknown_key_down) {
+                    unknown_key_down = 0;
+                    return -1;
+                }
+                cur_key = -1;
+            }
+            return IAL_KEYEVENT;
+        }
+        if (fd_key_power > 0) {
+            if(FD_ISSET(fd_key_power, in)) {
+                FD_CLR(fd_key_power, in);
+                read(fd_key_power, &key, sizeof(key));
+                if (0 == key.code)
+                    return -1;
+                else if (key.value > 0)
+                    cur_key = key.code;
+                else
+                   cur_key = -1;
+                return IAL_KEYEVENT;
+            }
+        }
+    }
+    return -1;
+}
+
+#define STREQUAL(str1, str2) (!strcmp(str1, str2))
+
+static int isKeyName(const char *name)
+{
+    int i;
+    for (i=0; i<SUNXI_KEY_CNT; i++) {
+        if(STREQUAL(name, key_set[i].name))
+            return i;
+    }
+
+    return -1;
+}
+
+static void initKeyCode(void)
+{
+    FILE *pRead;
+    char sKey[16];
+    char sName[32];
+    int iCode;
+    int idx;
+
+    pRead = fopen(KEYCODE_FILE,"r");
+    if (pRead == NULL) {
+            return;
+    }
+    while(EOF!=fscanf(pRead, "%s%d%s", sKey, &iCode, sName)) {
+        idx = isKeyName(sName);
+        if (idx >= 0)
+            key_set[idx].keyCode = iCode;
+    }
+    fclose(pRead);
+}
+
+BOOL InitSUNXIKeyInput(INPUT* input, const char* mdev, const char* mtype)
+{
+    fd_key = open(mdev, O_RDONLY);
+    if (fd_key < 0) {
+        _MG_PRINTF ("IAL>%s: Can not open touch screen device: %s!\n", __FILE__, mdev);
+        return FALSE;
+    }
+    fd_key_power = open("/dev/input/event1", O_RDONLY);
+    if (fd_key_power < 0) {
+        _MG_PRINTF ("IAL>%s: Can not open touch screen device: %s!\n",
+				__FILE__, "/dev/input/event1");
+    }
+    input->update_mouse = mouse_update;
+    input->get_mouse_xy = mouse_getxy;
+    input->set_mouse_xy = NULL;
+    input->get_mouse_button = mouse_getbutton;
+    input->set_mouse_range = NULL;
+
+    input->update_keyboard = keyboard_update;
+    input->get_keyboard_state = keyboard_getstate;
+    input->set_leds = NULL;
+
+    input->wait_event = wait_event;
+
+    mouse_x = 0;
+    mouse_y = 0;
+    mouse_button= 0;
+    initKeyCode();
+    return TRUE;
+}
+
+void TermSUNXIKeyInput (void)
+{
+    close(fd_key);
+}
+#endif
diff --git a/src/ial/sunxikey.h b/src/ial/sunxikey.h
new file mode 100644
index 0000000..26bd7ee
--- /dev/null
+++ b/src/ial/sunxikey.h
@@ -0,0 +1,51 @@
+#ifndef GUI_IAL_SUNXIKEY_H
+
+#define GUI_IAL_SUNXIKEY_H
+
+/*
+#define SUNXI_KEY_LEFT  139
+#define SUNXI_KEY_RIGHT 217
+#define SUNXI_KEY_MODE  115
+#define SUNXI_KEY_OK    102
+#define SUNXI_KEY_POWER 116
+#define SUNXI_KEY_MENU	118
+*/
+#define KEYCODE_FILE "/etc/sunxi-keyboard.kl"
+
+#define STR_UP		"UP"
+#define STR_DOWN	"DOWN"
+#define STR_MENU	"MENU"
+#define STR_OK		"OK"
+#define STR_POWER	"POWER"
+#define STR_MODE	"MODE"
+#define STR_RESET	"RESET"
+
+#define SUNXI_KEY_CNT 7
+
+typedef struct sunxi_key_t
+{
+	int keyCode;
+	char *name;
+	int scancode;
+}sunxi_key_t;
+
+static sunxi_key_t key_set[SUNXI_KEY_CNT] = {
+	{0, STR_UP,		SCANCODE_SUNXILEFT},
+	{0, STR_DOWN,	SCANCODE_SUNXIRIGHT},
+	{0, STR_MENU,	SCANCODE_SUNXIMENU},
+	{0, STR_OK,		SCANCODE_SUNXIOK},
+	{0, STR_POWER,	SCANCODE_SUNXIPOWER},
+	{0, STR_MODE,	SCANCODE_SUNXIMODE},
+	{0, STR_RESET,	SCANCODE_SUNXIRESET}
+};
+
+#ifdef __cplusplus
+extern "C" {
+#endif  /* __cplusplus */
+
+BOOL    InitSUNXIKeyInput (INPUT* input, const char* mdev, const char* mtype);
+void    TermSUNXIKeyInput (void);
+#ifdef __cplusplus
+}
+#endif  /* __cplusplus */
+#endif
diff --git a/src/ial/tslibial.c b/src/ial/tslibial.c
index 48a14e9..82780ab 100644
--- a/src/ial/tslibial.c
+++ b/src/ial/tslibial.c
@@ -30,6 +30,9 @@ static int mousex = 0;
 static int mousey = 0;
 static int button = 0;

+static int reversed = 0;
+static int screen_width  = 0;
+static int screen_height = 0;
 /************************  Low Level Input Operations **********************/
 /*
  * Mouse operations -- Event
@@ -40,8 +43,13 @@ static int mouse_update(void)

     if (ts_read (ts, &samp, 1) > 0) {
         if (samp.pressure > 0) {
+           if (reversed) {
+                mousex = screen_width  - samp.x;
+                mousey = screen_height - samp.y;
+           } else {
             mousex = samp.x;
             mousey = samp.y;
+           }
         }

         button = (samp.pressure > 0) ? IAL_MOUSE_LEFTBUTTON : 0;
@@ -105,6 +113,7 @@ BOOL InitTSLibInput(INPUT* input, const char* mdev, const char* mtype)
 {
     const char* tsdevice;

+    fprintf(stderr, "InitTSLibInput\n");
     if ((tsdevice = getenv ("TSLIB_TSDEVICE")) == NULL) {
         tsdevice = mdev;
     }
@@ -133,6 +142,13 @@ BOOL InitTSLibInput(INPUT* input, const char* mdev, const char* mtype)
     input->set_mouse_range = NULL;

     input->wait_event = wait_event;
+    screen_width  = __gal_screen->w;
+    screen_height = __gal_screen->h;
+    const char *need_reversed = NULL;
+    if ((need_reversed = getenv ("MG_TS_REVERSED")) != NULL) {
+        reversed = 1;
+    }
+    fprintf(stderr, "InitTSLibInput finish\n");
     return TRUE;
 }

--
1.9.1

